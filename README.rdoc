= Ruby On Rails respond_to analog for ASP.NET MVC

NuGet project: https://nuget.org/packages/Mvc.RespondTo

== Description

This library provides RoR like respond_to extension method to your controllers.
In short *RespondTo* allows your actions to respond with different data format (like xml or json) based on *HTTP Accept* header submitted by the client.

== Installation and usage

To install Mvc.RespondTo, run the following command in the {Package Manager Console}[http://docs.nuget.org/docs/start-here/using-the-package-manager-console]
    PM> Install-Package Mvc.RespondTo

To start using it you don't have to inherit anything. Just include namespace *Mvc.RespondTo* and your controller will have *RespondTo* extension method.

== SYNOPSIS    

    public ActionResult Index()
    {
        var people = new List<string> {"Larry", "Garry", "Sam"};
        return this.RespondTo(format =>
        {
            format.Html(() => View(people));
            format.Json(() => Json(people));
        });
    }

In short it is: "if the client wants HTML in response to this action, just respond in default way. But if the client wants JSON, return a list of people in JSON format."

See complete sample {here}[https://github.com/evgeny-myasishchev/mvc-respond-to/blob/master/RespondTo.Tests/Samples/PeopleController.cs]

== Handle some specific MIME type

    public ActionResult Index()
    {
        var people = new List<string> {"Larry", "Garry", "Sam"};
        return this.RespondTo(format =>
        {
            ..........

            //Handling custom mime type
            format.Mime("text/plain", () => Content(string.Join(", ", people)));
        });
    }

== Adding reusable formats

Often you need respond to some formats in several actions. For this purpose you need to just add an extension method to MultiMimeFormat class that may look something like this:
    public static class MultiMimeFormatExtensions
    {
        public static void Pdf(this MultiMimeFormat format, Func<ActionResult> responder)
        {
            format.Mime("application/pdf", responder);
        }
    }

Then you can use your *Pdf* extension like this:
    public ActionResult Index()
    {
        var people = new List<string> {"Larry", "Garry", "Sam"};
        return this.RespondTo(format =>
        {
            ..........

            format.Pdf(() => ...Return ActionResult that renders PDF...);
        });
    }
    
== Customizing resolution logic

Resolve hook can be uesd if for example you need to render PDF based on some query string key:
    public static class MultiMimeFormatExtensions
    {
        public static void Pdf(this MultiMimeFormat format, Func<ActionResult> responder)
        {
            format.WithResolveHook(context =>
            {
                if (context.HttpContext.Request.QueryString["pdf"] == "true") 
                    return format.ResolveResult("application/pdf");
                return null;
            });
            format.Mime("application/pdf", responder);
        }
    }

== Writing unit tests

RespondTo returns MultiMimeResult that is just an instance of ActionResult. It has a Format property which is an instance of MultiMimeFormat and holds all your registered responders.
Sample test of index action (written with NUnit) is below:

    [Test]
    public void TestIndex()
    {
        var controller = new PeopleController();
        var result = controller.Index();
        Assert.That(result, Is.InstanceOf<MultiMimeResult>());
        var multiMimeResult = (MultiMimeResult)result;
    
        var jsonResult = (JsonResult)multiMimeResult.Format.ResultFor("application/json");
        Assert.That(jsonResult.Data, Is.Not.Null);
        Assert.That(jsonResult.Data, Is.InstanceOf<IEnumerable<string>>());
    
        var viewResult = (ViewResult)multiMimeResult.Format.ResultFor("text/html");
        Assert.That(viewResult.Model, Is.Not.Null);
        Assert.That(viewResult.Model, Is.InstanceOf<IEnumerable<string>>());
    
        var textResult = (ContentResult)multiMimeResult.Format.ResultFor("text/plain");
        Assert.That(textResult.Content, Is.EqualTo("Larry, Garry, Sam"));
    }

Full source code of a sample controller is {here}[https://github.com/evgeny-myasishchev/mvc-respond-to/blob/master/RespondTo.Tests/Samples/PeopleController.cs] and for the test is {here}[https://github.com/evgeny-myasishchev/mvc-respond-to/blob/master/RespondTo.Tests/Samples/PeopleControllerTest.cs].
